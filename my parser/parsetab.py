
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CLOSED_BR COLON COMMA DASH DELTA ID NUM OPEN_BR SIGMA START_STATE STATES TERMINALAutomata : Sigma\n                 | States\n                 | Terminal\n                 | Start_state\n                 | Edges Sigma : Start_description_sigma list_symbStates : Start_description_states list_stateTerminal : Start_description_terminal list_stateStart_state : Start_description_start_state list_stateEdges : Start_description_edges list_edgesStart_description_sigma : SIGMA COLONStart_description_states : STATES COLONStart_description_terminal : TERMINAL COLONStart_description_start_state : START_STATE COLONStart_description_edges : DELTA COLONlist_edges : list_edges COMMA edge\n                | edgeedge : OPEN_BR ID DASH ID COMMA NUM CLOSED_BRlist_state : list_state COMMA ID\n                | IDlist_symb : list_symb COMMA NUM\n                | NUM'
    
_lr_action_items = {'SIGMA':([0,],[12,]),'STATES':([0,],[13,]),'TERMINAL':([0,],[14,]),'START_STATE':([0,],[15,]),'DELTA':([0,],[16,]),'$end':([1,2,3,4,5,6,17,18,19,20,21,22,23,24,35,36,37,42,],[0,-1,-2,-3,-4,-5,-6,-22,-7,-20,-8,-9,-10,-17,-21,-19,-16,-18,]),'NUM':([7,26,31,40,],[18,-11,35,41,]),'ID':([8,9,10,25,27,28,29,32,38,],[20,20,20,34,-12,-13,-14,36,39,]),'OPEN_BR':([11,30,33,],[25,-15,25,]),'COLON':([12,13,14,15,16,],[26,27,28,29,30,]),'COMMA':([17,18,19,20,21,22,23,24,35,36,37,39,42,],[31,-22,32,-20,32,32,33,-17,-21,-19,-16,40,-18,]),'DASH':([34,],[38,]),'CLOSED_BR':([41,],[42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Automata':([0,],[1,]),'Sigma':([0,],[2,]),'States':([0,],[3,]),'Terminal':([0,],[4,]),'Start_state':([0,],[5,]),'Edges':([0,],[6,]),'Start_description_sigma':([0,],[7,]),'Start_description_states':([0,],[8,]),'Start_description_terminal':([0,],[9,]),'Start_description_start_state':([0,],[10,]),'Start_description_edges':([0,],[11,]),'list_symb':([7,],[17,]),'list_state':([8,9,10,],[19,21,22,]),'list_edges':([11,],[23,]),'edge':([11,33,],[24,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Automata","S'",1,None,None,None),
  ('Automata -> Sigma','Automata',1,'p_automata','my_parse.py',140),
  ('Automata -> States','Automata',1,'p_automata','my_parse.py',141),
  ('Automata -> Terminal','Automata',1,'p_automata','my_parse.py',142),
  ('Automata -> Start_state','Automata',1,'p_automata','my_parse.py',143),
  ('Automata -> Edges','Automata',1,'p_automata','my_parse.py',144),
  ('Sigma -> Start_description_sigma list_symb','Sigma',2,'p_sigma','my_parse.py',148),
  ('States -> Start_description_states list_state','States',2,'p_states','my_parse.py',152),
  ('Terminal -> Start_description_terminal list_state','Terminal',2,'p_terminal','my_parse.py',156),
  ('Start_state -> Start_description_start_state list_state','Start_state',2,'p_start_state','my_parse.py',160),
  ('Edges -> Start_description_edges list_edges','Edges',2,'p_edges','my_parse.py',164),
  ('Start_description_sigma -> SIGMA COLON','Start_description_sigma',2,'p_sigma_start','my_parse.py',168),
  ('Start_description_states -> STATES COLON','Start_description_states',2,'p_states_start','my_parse.py',173),
  ('Start_description_terminal -> TERMINAL COLON','Start_description_terminal',2,'p_terminal_start','my_parse.py',178),
  ('Start_description_start_state -> START_STATE COLON','Start_description_start_state',2,'p_start_state_start','my_parse.py',183),
  ('Start_description_edges -> DELTA COLON','Start_description_edges',2,'p_edges_start','my_parse.py',188),
  ('list_edges -> list_edges COMMA edge','list_edges',3,'p_list_edges','my_parse.py',193),
  ('list_edges -> edge','list_edges',1,'p_list_edges','my_parse.py',194),
  ('edge -> OPEN_BR ID DASH ID COMMA NUM CLOSED_BR','edge',7,'p_edge','my_parse.py',198),
  ('list_state -> list_state COMMA ID','list_state',3,'p_read_list_state','my_parse.py',208),
  ('list_state -> ID','list_state',1,'p_read_list_state','my_parse.py',209),
  ('list_symb -> list_symb COMMA NUM','list_symb',3,'p_read_list_symb','my_parse.py',222),
  ('list_symb -> NUM','list_symb',1,'p_read_list_symb','my_parse.py',223),
]
